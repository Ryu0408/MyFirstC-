/*
3.생성자
생성자란 클래스의 객체(클래스를이용해만든변수를객체라고부릅니다.)를
생성할때 자동으로 한 번만 호출되는 함수를 의미합니다.
이 함수는 단 한번만 호출이 가능하고, 객체를 생성할 때 자동으로 호출되기
때문에 만약 파라미터값을 설정해둔다면 사용자가 무조건 파라미터값을
입력해야만 객체를 생성할 수 있도록 만들 수도 있습니다.

생성자의문법은

클래스내부에
1.리턴자료형을 기입하지 않으며
2.함수이름이 클래스자체의 이름과 같게 만들면
자동으로 생성자 처리가 됩니다.
-----
또한 생성자를 사용했을때 초기화할 수 있는 방법은 두가지가 있습니다.
하나는 실행문을 사용해 초기화하는 방법이고
다른 하나는"멤버이니셜라이저"를 사용해 초기화를 하는것입니다.
"멤버이니셜라이저"란생성자의 실행문실행이전에 사전에 먼저
변수대입을 처리해주는 부분입니다.
문법적으로는 생성자명(파라미터1, 파라미터2):변수명1(대입값1),변수명2(대입값2)...{ 실행문... }
과 같이 선언합니다.
생성자명뒤에:을 이용해서 초기화해줄 자료만 따로 초기화해줄 수 있습니다.
멤버이니셜라이저는 앞으로도 계속해서 사용되기 때문에 잘 기억해두셔야하며
멤버 이니셜라이저를 사용해서 객체를 만들면 const변수나 참조자변수와 같이
선언과동시에초기화가되어야하는자료들을선언및초기화문법처럼
활용할수있습니다. ------
*/
#include <iostream>
using namespace std;
class Test {
	int n1;
	int n2;
public:
	Test() {
		n1 = 0;
		n2 = 0;
	}
	Test(int n) {
		n1 = n;
		n2 = 0;
	}
	Test(int num1, int num2) {
		n1 = num1;
		n2 = num2;
	}
	void ShowData() {
		cout << n1 << ' ' << n2 << endl;
	}
};

int main(void) {
	Test t1;
	t1.ShowData();

	Test t2(1);
	t2.ShowData();

	Test t3(10, 20);
	t3.ShowData();

	system("pause");
	return 0;
}